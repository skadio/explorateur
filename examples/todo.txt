BestFirsSearch -> split into MinFirstSearch and MaxFirstSearch

depth-first search (DFS) (pick newest element),
breadth first search (BFS) (pick oldest element)
Dijkstra’s Algorithm / uniform cost search (pick element with lowest path cost),
A-star search by choosing the node with lowest cost plus heuristic value, and so on.

A* is a modification of Dijkstra’s Algorithm that is optimized for a single destination. D
ijkstra’s Algorithm can find paths to all locations;
A* finds paths to one location, or the closest of several locations.
It prioritizes paths that seem to be leading closer to a goal.

A* Graph Search has a closed list and doesn't expand nodes in the closed list.
A* Tree Search on the other hand doesn't keep around a closed list,
it's a slightly different algorithm.
Regarding properties of the heuristic function:
Indeed, an admissible heuristic is required for A* Tree Search to be guaranteed to be optimal
and a consistent heuristic is required for A* Graph Search to be guaranteed to be optimal.
However, even when those properties don't hold both algorithms are still perfectly well-defined.

both tree and graph searches produce a tree (from which you can derive a path)
while exploring the search space, which is usually represented as a graph.

In the case of a graph search, we use a list, called the closed list (also called explored set), to keep track of the nodes that have already been visited and expanded, so that they are not visited and expanded again.
In the case of a tree search, we do not keep this closed list. Consequently, the same node can be visited multiple (or even infinitely many) times, which means that the produced tree (by the tree search) may contain the same node multiple times.

The advantage of graph search obviously is that, if we finish the search of a node, we will never search it again. On the other hand, the tree search can visit the same node multiple times.
The disadvantage of graph search is that it uses more memory (which we may or may not have) than tree search. This matters because graph search actually has exponential memory requirements in the worst case, making it impractical without either a really good search heuristic or an extremely simple problem.
So, there is a trade-off between space and time when using graph search as opposed to tree search (or vice-versa).

occasionally, people may use the term tree search to refer to a tree traversal, which is used to refer to a search in a search tree (e.g., a binary search tree or a red-black tree), which is a tree (i.e. a graph without cycles) that maintains a certain order of its elements.

https://stackoverflow.com/questions/10680180/what-is-the-difference-between-graph-search-and-tree-search
The Problem Is Always a Graph
The distinction between tree search and graph search is not rooted in the fact whether the problem graph is a tree or a general graph. It is always assumed you're dealing with a general graph.

Optimal solutions
Some methods of implementing select can guarantee to return optimal solutions - i.e. a shortest path or a path with minimal cost (for graphs with costs attached to edges). This basically holds whenever nodes are expanded in order of increasing cost, or when the cost is a nonzero positive constant. A common algorithm that implements this kind of select is uniform cost search, or if step costs are identical, BFS or IDDFS. IDDFS avoids BFS's aggressive memory consumption and is generally recommended for uninformed search (aka brute force) when step size is constant.

A* tree search algorithm delivers an optimal solution when used with an admissible heuristic.
A* graph search algorithm, however, only makes this guarantee when it used with a consistent (or "monotonic") heuristic (a stronger condition than admissibility).
Consistent: regardless of search node explore, heuristic remains admissible

Using state for the problem graph vertices and node for the traversal graph could definitely improve the clarity of the answer.